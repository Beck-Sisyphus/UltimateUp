// Generated by CoffeeScript 1.9.1
(function() {
  var ServerIO,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ServerIO = (function(superClass) {
    extend(ServerIO, superClass);

    function ServerIO(url) {
      this.url = url;
      this.onError = bind(this.onError, this);
      this.onClose = bind(this.onClose, this);
      this.onOpen = bind(this.onOpen, this);
      this._sendMsg = bind(this._sendMsg, this);
      this.onMessage = bind(this.onMessage, this);
      this["super"]();
      this.socket = null;
      this.msgQueue = [];
      this.reqCallbacks = [];
      this.queueTimer = null;
      this.socketInit();
    }

    ServerIO.prototype.socketInit = function() {
      var socket;
      socket = this.socket = new WebSocket(this.url);
      socket.onopen = onOpen;
      socket.onmessage = onMessage;
      socket.onclose = onClose;
      return socket.onerror = onError;
    };

    ServerIO.prototype.onMessage = function(e) {
      var data;
      data = JSON.parse(e.data);
      if (data.type === 'push') {
        return this.emit(data.kind, data);
      } else if (e.type === 'res') {
        return this.reqCallbacks[e.id](data);
      }
    };

    ServerIO.prototype.maybeSendMsg = function() {
      if (!this.queueTimer && this.msgQueue.length !== 0) {
        return this.queueTimer = setTimeout(this._sendMsg, 0);
      }
    };

    ServerIO.prototype._sendMsg = function() {
      this.queueTimer = null;
      this.socket.send(this.msgQueue.unshift());
      return this.maybeSendMsg();
    };

    ServerIO.prototype.onOpen = function() {
      return this.maybeSendMsg();
    };

    ServerIO.prototype.onClose = function(e) {
      return this.socketInit();
    };

    ServerIO.prototype.onError = function(err) {
      return this.socketInit();
    };

    ServerIO.prototype.fetch = function(req) {
      return new Promise(function(resolve, reject) {
        var array, id;
        req.type = req.type | "req";
        array = new Uint32Array(1);
        window.crypto.getRandomValues(array);
        id = req.id = array[0];
        this.reqCallbacks[id] = function(err, data) {
          if (err) {
            return reject(err);
          } else {
            return resolve(data);
          }
        };
        return this.msgQueue.push(JSON.stringify(req));
      });
    };

    return ServerIO;

  })(EventEmitter);

}).call(this);
